name: tests

on:
  pull_request:
    paths-ignore:
      - ".github/**"
      - "examples/**"
      - "*.md"
  workflow_run:
    workflows: [changelog]
    types: [completed]

jobs:
  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-20.04"]
        container:
          - python:3.8-buster
          - python:3.8-bullseye
          - python:3.9-buster
          - python:3.9-bullseye
    container: ${{ matrix.container }}
    continue-on-error: false
    outputs:
      release: ${{ steps.push.outputs.release }}
    steps:
      - name: Check out head
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          token: ${{ secrets.ADMIN_TOKEN }}

      - name: Install package dependencies
        run: |
          pip install --no-cache-dir -r ./requirements.txt
          pip install --no-cache-dir -r ./tests/requirements.txt

      - name: Build package distribution
        run: python setup.py sdist

      - name: Validate distribution
        run: |
          VERSION="$(cat ./VERSION)"
          cd dist
          tar xzf lmptools-${VERSION}.tar.gz
          diff -r lmptools-${VERSION}/lmptools/core ../lmptools/core
          diff -r lmptools-${VERSION}/lmptools/dump ../lmptools/dump
          diff -r lmptools-${VERSION}/lmptools/writers ../lmptools/writers
          rm -rf lmptools-${VERSION}/

      - name: Install lmptools
        run: pip install -e .

      - name: Run tests and measure coverage
        run: |
          PYTHONPATH=${PWD}/ pytest -vv --cov-report xml:coverage.xml --cov-report term-missing --cov '.' tests

      - name: Upload report to Codecov
        if: github.ref == 'refs/head/develop' && matrix.container == 'python:3.9-buster'
        uses: codecov/codecov-action@v2
        with:
          files: ./coverage.xml

      - name: Get latest release tag
        id: get-latest-tag
        if: github.ref == 'refs/head/develop' && matrix.os == 'ubuntu-20.04' && matrix.container == 'python:3.9-buster'
        run: |
          tag=$(git describe --abbrev=0)
          echo "::set-output name=tag::$tag"

      - name: Check if a release can be made or not
        id: push
        if: github.ref == 'refs/heads/develop' && matrix.os == 'ubuntu-20.04' && matrix.container == 'python:3.9-buster'
        run: |
          MASTER_VERSION="$(echo ${{ steps.get-latest-tag.outputs.tag }} | cut -c2- )"
          VERSION=$(cat ./VERSION)"
          echo "MASTER_VERSION = ${MASTER_VERSION}"
          echo "VERSION = ${VERSION}"
          release=false
          if [ "$MASTER_VERSION" == "$VERSION" ]; then
            echo "$VERSION has been previously released"
          else
            release=true
          fi
          echo "RELEASE=$release" >> $GITHUB_ENV
          echo "::set-output name=release::$release"

  release:
    needs: tests
    if: github.ref == 'refs/heads/develop'
    uses: venkatBala/lmptools/.github/workflows/release.yml@develop
    secrets: inherit
    with:
      prerelease: true
